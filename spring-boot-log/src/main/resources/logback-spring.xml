<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="/app/log" />
    <!-- 定义日志文件名称 -->
    <property name="appName" value="mqf-springboot"></property>
    <!--
        定义日志策略的节点，一个日志策略对应一个 <appender> ，一个配置文件中可以有零个或者多该节点，
        但一个配置文件如果没有定义至少一个 <appender> ，
        虽然程序不会报错，但就不会有任何的日志信息输出，也失去了意义，该节点有两个必要的属性：
        name ：指定该节点的名称，方便之后的引用;
        class ：指定该节点的全限定名，所谓的全限定名就是定义该节点为哪种类型的日志策略，
            比如我们需要将日志输出到控制台，就需要指定 class 的值为 ch.qos.logback.core.ConsoleAppender ;
            需要将日志输出到文件，则 class 的值为 ch.qos.logback.core.FileAppender 等
    -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
			%d{yyyy-MM-dd HH:mm:ss}表示日期时间，
			%logger{50}: 表示logger名字最长50个字符，否则按照句点分割。
			        日志的logger名称，可以简写为 %c{} , %lo{} 的形式，
			        使用默认的参数时可以省略 {} ，可以定义一个整形的参数来控制输出名称的长度，有下面三种情况：
                        (1)不输入表示输出完整的 <logger> 名称
                        (2)输入 0 表示只输出 <logger> 最右边点号之后的字符串
                        (3)输入其他数字表示输出小数点最后边点号之前的字符数量
			%thread ：产生日志的线程名，可简写为 %t
			%line : 当前打印日志的语句在程序中的行号，可简写为 %L
			%-5level：日志级别,级别从左显示5个字符宽度,可简写为 %le , %p
			%message ：日志消息,程序员定义的日志打印内容,可简写为 %msg , %m
			%n ：换行,即一条日志信息占一行
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <springProfile name="dev">
                <pattern>
                    %d{yyyy-MM-dd HH:mm:ss.SSS}  ---> [%thread] [[%line]] %-5level %logger{50} - %msg%n
                </pattern>
            </springProfile>
            <springProfile name="active">
                <pattern>
                    %d{yyyy-MM-dd HH:mm:ss.SSS}  ==== [%thread] %-5level %logger{50} - %msg%n
                </pattern>
            </springProfile>
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->  
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动 
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- 
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!-- 
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->     
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <!--
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：用来指定受此 <logger> 约束的包或者类,表示匹配的logger类型前缀，也就是包的前半部分
		level：可选属性，用来指定日志的输出级别，如果不设置，那么当前 <logger> 会继承上级的级别,
		        要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：是否向上级传递输出信息，两个可选值 true or false ，默认为 true,
		        作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- hibernate logger -->
    <logger name="com.mqf.study" level="debug" />
    <!-- Spring framework logger -->
    <logger name="org.springframework" level="debug" additivity="false"></logger>



    <!-- 
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
    -->
    <root level="info">
        <appender-ref ref="stdout" />
        <appender-ref ref="appLogAppender" />
    </root>
</configuration> 